---
AWSTemplateFormatVersion: '2010-09-09'
Description: An AWS CloudFormation template
Resources:

  S3BucketAuthor:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !Sub ${AWS::StackName}-author
      AccessControl: Private
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - "*"
          AllowedMethods:
          - GET
          - PUT
          - POST
          - DELETE
          AllowedOrigins:
          - "*"
          ExposedHeaders:
          - Date
          Id: myCORSRuleId1
          MaxAge: '3600'

  S3BucketSite:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !Sub ${AWS::StackName}-site
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - "*"
          AllowedMethods:
          - GET
          AllowedOrigins:
          - "*"
          ExposedHeaders:
          - Date
          Id: myCORSRuleId1
          MaxAge: 3600

  S3BucketSitePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: S3BucketSite
      PolicyDocument:
        Statement:
        - Action:
          - s3:GetObject
          Effect: Allow
          Resource:
            !Sub arn:aws:s3:::${S3BucketSite}/*
          Principal: "*"

  LambdaPublisher:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        !Sub ${AWS::StackName}--publishLambda
      Handler: index.handler
      Role:
        !GetAtt [IamRoleLambda, Arn]
      Code:
        ZipFile:
          exports.handler = function(event, context, cb) { return cb(null, {message:'Hello World'}); };
      Runtime: nodejs4.3
      MemorySize: 512
      Timeout: 20
  IamRoleLambda:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        !Sub ${AWS::StackName}-role-lambda
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  IamPolicyLambda:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        !Sub ${AWS::StackName}-lambda
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            !Sub arn:aws:logs:${AWS::Region}:*:*
        - Effect: Allow
          Action:
          - s3:*
          Resource:
            !Sub arn:aws:s3:::${S3BucketAuthor}*
        - Effect: Allow
          Action:
          - s3:*
          Resource:
            !Sub arn:aws:s3:::${S3BucketSite}*
      Roles:
      - Ref: IamRoleLambda
